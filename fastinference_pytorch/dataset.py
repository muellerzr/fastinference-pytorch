# AUTOGENERATED! DO NOT EDIT! File to edit: 01_dataset.ipynb (unless otherwise specified).

__all__ = ['Dataset']

# Cell
from fastcore.transform import Transform, Pipeline
from fastcore.utils import store_attr

# Cell
class Dataset():
    def __init__(self, items, type_tfms=[], after_item=[], after_batch=[], n_inp=1):
        """
        General dataset handler

        Params:
          > items: A dataset, could be filenames, etc
          > type_tfms: A list of functions related to getting your `items`
          > after_item: A list of item transforms to apply
          > after_batch: A list of batch transforms to apply
        """
        if not isinstance(type_tfms, Pipeline): type_tfms = Pipeline(type_tfms)
        if not isinstance(after_item, Pipeline): after_item = Pipeline(after_item)
        if not isinstance(after_batch, Pipeline): after_batch = Pipeline(after_batch)
        for i, item in enumerate(items): items[i] = type_tfms(item)
        self.dataset = items
        store_attr(self, 'after_item,after_batch,n_inp')

    def __len__(self): return len(self.dataset)

    def __getitem__(self, idx):
        data = self.dataset[idx]
        for tfm in self.after_item:     data = tfm(data)
        for tfm in self.after_batch:    data = tfm(data)
        return data